#!/usr/bin/env python

import argparse
import logging
import matplotlib.pyplot as plt
import numpy as np
import pvaccess as pva
import random
import time

__version__ = pva.__version__
logger = logging.getLogger(__name__)


def rng(start=0, end=1000, precision=0.01):
    """
    Random Number Generator - float, fixed precision
    
    Return a random float with given parameters.
    """
    precision = max(precision, 1e-6)
    return random.randint(start/precision, end/precision) * precision


class BlueskyImageServer(pva.PvaServer):

    PVA_TYPE_KEY_MAP = {
        np.dtype("uint8"): "ubyteValue",
        np.dtype("int8"): "byteValue",
        np.dtype("uint16"): "ushortValue",
        np.dtype("int16"): "shortValue",
        np.dtype("uint32"): "uintValue",
        np.dtype("int32"): "intValue",
        np.dtype("uint64"): "ulongValue",
        np.dtype("int64"): "longValue",
        np.dtype("float32"): "floatValue",
        np.dtype("float64"): "doubleValue",
    }

    def __init__(self, channelName, extraFieldsTypeDict={}):
        pva.PvaServer.__init__(self)
        self.channelName = channelName
        # Extra fields could be added to image, e.g.
        #   extraFieldsTypeDict = {'anInt' : pva.INT, 'aStr' : pva.STRING}
        # This should be matched with actual values passed to
        # the updateImage() method, e.g.
        #   extraFieldsValueDict = {'anInt' : 10, 'aStr' : 'Generated by Pete'}
        self.extraFieldsTypeDict = extraFieldsTypeDict
        self.addRecord(self.channelName, pva.NtNdArray(extraFieldsTypeDict))
        self.frameId = 0

    def getTimestamp(self):
        s = time.time()
        ns = int((s - int(s)) * 1_000_000_000)
        s = int(s)
        return pva.PvTimeStamp(s, ns)

    def updateImage(self, inputFile, extraFieldsValueDict={}):
        logger.info(f"Reading input file: {inputFile}")
        data = plt.imread(inputFile)
        self.updateFrame(data, extraFieldsValueDict=extraFieldsValueDict)
        logger.info(f"Published image {self.frameId} from: {inputFile}")

    def updateFrame(self, image_frame, extraFieldsValueDict={}):
        logger.info(f"image frame shape: {image_frame.shape}")
        data = image_frame
        rows, cols = data.shape
        size = rows * cols * data.itemsize

        self.frameId += 1
        frame = pva.NtNdArray(self.extraFieldsTypeDict)

        frame["uniqueId"] = self.frameId
        dims = [
            pva.PvDimension(cols, 0, cols, 1, False),
            pva.PvDimension(rows, 0, rows, 1, False),
        ]
        frame["dimension"] = dims
        frame["compressedSize"] = size
        frame["uncompressedSize"] = size
        ts = self.getTimestamp()
        frame["timeStamp"] = ts
        frame["dataTimeStamp"] = ts
        frame["descriptor"] = "Bluesky Image"
        pvaTypeKey = self.PVA_TYPE_KEY_MAP.get(data.dtype)
        frame["value"] = {pvaTypeKey: data.flatten()}
        attrs = [
            pva.NtAttribute("ColorMode", pva.PvInt(0)),
            pva.NtAttribute("ImageGoal", pva.PvString("M6 demo")),
            pva.NtAttribute("pos_x", pva.PvDouble(rng())),
            pva.NtAttribute("pos_y", pva.PvDouble(rng())),
        ]
        frame["attribute"] = attrs
        if extraFieldsValueDict:
            frame.set(extraFieldsValueDict)
        self.update(frame)


def main():
    parser = argparse.ArgumentParser(
        description="Bluesky Image Server Example"
    )
    parser.add_argument(
        "--input-file",
        "-if",
        type=str,
        dest="input_file",
        default=None,
        help="Input file to be delivered over PVA",
    )
    parser.add_argument(
        "--channel-name",
        "-cn",
        type=str,
        dest="channel_name",
        default="bluesky:image",
        help="Server PVA channel name (default: bluesky:image)",
    )
    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version="%(prog)s {version}".format(version=__version__),
    )

    args, unparsed = parser.parse_known_args()
    if len(unparsed) > 0:
        raise RuntimeError(f"Unrecognized argument(s): {' '.join(unparsed)}")

    server = BlueskyImageServer(args.channel_name)

    server.start()
    server.updateImage(args.input_file)
    time.sleep(60)
    server.stop()


if __name__ == "__main__":
    main()
